import * as Zod from "zod";
import { TInstanceOfOptions } from "../decorators";
export declare const inferZodSchema: <TInstance extends Object>(target: new (...args: any[]) => TInstance) => Zod.ZodType<any, Zod.ZodTypeDef, any>;
export declare const generateSchema: (target: new (...args: any[]) => Object, options?: TInstanceOfOptions, isArray?: boolean) => Zod.ZodEffects<Zod.ZodType<any, Zod.ZodTypeDef, any>, Object, any> | Zod.ZodArray<Zod.ZodEffects<Zod.ZodType<any, Zod.ZodTypeDef, any>, Object, any>, "many"> | Zod.ZodNullable<Zod.ZodEffects<Zod.ZodType<any, Zod.ZodTypeDef, any>, Object, any>> | Zod.ZodNullable<Zod.ZodArray<Zod.ZodEffects<Zod.ZodType<any, Zod.ZodTypeDef, any>, Object, any>, "many">> | Zod.ZodOptional<Zod.ZodEffects<Zod.ZodType<any, Zod.ZodTypeDef, any>, Object, any>> | Zod.ZodOptional<Zod.ZodArray<Zod.ZodEffects<Zod.ZodType<any, Zod.ZodTypeDef, any>, Object, any>, "many">> | Zod.ZodOptional<Zod.ZodNullable<Zod.ZodArray<Zod.ZodEffects<Zod.ZodType<any, Zod.ZodTypeDef, any>, Object, any>, "many">>> | Zod.ZodOptional<Zod.ZodNullable<Zod.ZodEffects<Zod.ZodType<any, Zod.ZodTypeDef, any>, Object, any>>>;
