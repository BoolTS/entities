import * as Zod from "zod";
import { TInstanceOfOptions } from "../decorators";
export declare const inferZodSchema: <TInstance extends Object>(target: new (...args: any[]) => TInstance) => Zod.ZodType<unknown, unknown, Zod.z.core.$ZodTypeInternals<unknown, unknown>>;
export declare const generateSchema: (target: new (...args: any[]) => Object, options?: TInstanceOfOptions, isArray?: boolean) => Zod.ZodPipe<Zod.ZodType<unknown, unknown, Zod.z.core.$ZodTypeInternals<unknown, unknown>>, Zod.ZodTransform<Object, unknown>> | Zod.ZodArray<Zod.ZodPipe<Zod.ZodType<unknown, unknown, Zod.z.core.$ZodTypeInternals<unknown, unknown>>, Zod.ZodTransform<Object, unknown>>> | Zod.ZodNullable<Zod.ZodPipe<Zod.ZodType<unknown, unknown, Zod.z.core.$ZodTypeInternals<unknown, unknown>>, Zod.ZodTransform<Object, unknown>>> | Zod.ZodNullable<Zod.ZodArray<Zod.ZodPipe<Zod.ZodType<unknown, unknown, Zod.z.core.$ZodTypeInternals<unknown, unknown>>, Zod.ZodTransform<Object, unknown>>>> | Zod.ZodOptional<Zod.ZodPipe<Zod.ZodType<unknown, unknown, Zod.z.core.$ZodTypeInternals<unknown, unknown>>, Zod.ZodTransform<Object, unknown>>> | Zod.ZodOptional<Zod.ZodArray<Zod.ZodPipe<Zod.ZodType<unknown, unknown, Zod.z.core.$ZodTypeInternals<unknown, unknown>>, Zod.ZodTransform<Object, unknown>>>> | Zod.ZodOptional<Zod.ZodNullable<Zod.ZodPipe<Zod.ZodType<unknown, unknown, Zod.z.core.$ZodTypeInternals<unknown, unknown>>, Zod.ZodTransform<Object, unknown>>>> | Zod.ZodOptional<Zod.ZodNullable<Zod.ZodArray<Zod.ZodPipe<Zod.ZodType<unknown, unknown, Zod.z.core.$ZodTypeInternals<unknown, unknown>>, Zod.ZodTransform<Object, unknown>>>>>;
